version: '3.8'

services:
  # Kasm Workspaces services
  kasm_agent:
    image: kasmweb/agent:${KASM_VERSION:-1.15.0}
    container_name: kasm_agent
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - kasm_db_1.15.0:/data

  kasm_api:
    image: kasmweb/api:${KASM_VERSION:-1.15.0}
    container_name: kasm_api
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - DB_HOST=${DB_HOST:-kasm_db}
      - DB_NAME=${DB_NAME:-kasm}
      - DB_USER=${DB_USER:-kasmdb}
      - DB_PASS=${DB_PASS:-kasmdb_password}
      - DB_PORT=${DB_PORT:-5432}

  kasm_db:
    image: postgres:12-alpine
    container_name: kasm_db
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.4
      kasm_network: {}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - kasm_db_1.15.0:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-kasmdb}
      - POSTGRES_PASSWORD=${DB_PASS:-kasmdb_password}
      - POSTGRES_DB=${DB_NAME:-kasm}

  kasm_guac:
    image: kasmweb/kasm-guac:${KASM_VERSION:-1.15.0}
    container_name: kasm_guac
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.9
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kasm_manager:
    image: kasmweb/manager:${KASM_VERSION:-1.15.0}
    container_name: kasm_manager
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.7
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kasm_proxy:
    image: kasmweb/nginx:1.25.3
    container_name: kasm_proxy
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.2
      kasm_network: {}
    ports:
      - "${KASM_PORT:-443}:443"
    depends_on:
      - kasm_api
      - kasm_manager

  kasm_redis:
    image: redis:5-alpine
    container_name: kasm_redis
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.6
    command: redis-server --appendonly yes

  kasm_share:
    image: kasmweb/share:${KASM_VERSION:-1.15.0}
    container_name: kasm_share
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.8
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portainer for container management
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
    networks:
      - portainer_network
      - hack_network

  # Nginx Proxy Manager
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"      # Admin UI
      - "8443:443"   # HTTPS (changed port to avoid conflict with Kasm)
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - kasm_network
      - hack_network

  # Evilginx2 in Kasm Workspace
  evilginx2-workspace:
    image: kasmweb/ubuntu-focal-desktop:1.14.0
    container_name: evilginx2-workspace
    restart: unless-stopped
    ports:
      - "6901:6901"  # Kasm Web interface for evilginx2
    environment:
      - VNC_PW=${WORKSPACE_PASSWORD:-password123}
      - KASM_USER=evilginx_user
    volumes:
      - evilginx2_workspace_data:/home/kasm-user/data
      - ./setup-evilginx2.sh:/dockerstartup/setup-evilginx2.sh
    networks:
      - kasm_network
      - hack_network

  # Gophish in Kasm Workspace
  gophish-workspace:
    image: kasmweb/ubuntu-focal-desktop:1.14.0
    container_name: gophish-workspace
    restart: unless-stopped
    ports:
      - "6902:6901"  # Kasm Web interface for gophish
    environment:
      - VNC_PW=${WORKSPACE_PASSWORD:-password123}
      - KASM_USER=gophish_user
    volumes:
      - gophish_workspace_data:/home/kasm-user/data
      - ./setup-gophish.sh:/dockerstartup/setup-gophish.sh
    networks:
      - kasm_network
      - hack_network

  # Standalone Evilginx2 service
  evilginx2:
    container_name: evilginx2
    build:
      context: ./evilginx2
      dockerfile: Dockerfile
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "${EVILGINX2_HTTP_PORT:-8880}:80"
      - "${EVILGINX2_HTTPS_PORT:-8443}:443"
      - "5353:53/udp"
    volumes:
      - evilginx2_data:/root/.evilginx
    networks:
      - hack_network
    environment:
      - CONFIG_PATH=/root/.evilginx

  # Standalone Gophish service
  gophish:
    container_name: gophish
    build:
      context: ./gophish
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${GOPHISH_ADMIN_PORT:-3333}:3333"
      - "${GOPHISH_PHISH_PORT:-8080}:8080"
    volumes:
      - gophish_data:/opt/gophish/data
      - ./integration-config.json:/opt/gophish/integration-config.json:ro
    networks:
      - hack_network
    depends_on:
      - evilginx2

  # Axiom (as a service)
  axiom:
    container_name: axiom
    image: ubuntu:20.04
    platform: linux/amd64
    restart: unless-stopped
    command: >
      bash -c "apt update && apt install -y git curl sudo golang wget zip unzip lsb-release && 
      git clone https://github.com/pry0cc/axiom ~/.axiom/ && cd && 
      chmod +x ~/.axiom/interact/axiom-configure && ~/.axiom/interact/axiom-configure --docker && 
      tail -f /dev/null"
    volumes:
      - axiom_data:/root/.axiom
    networks:
      - hack_network

networks:
  kasm_default_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
  kasm_network:
    driver: bridge
  portainer_network:
    driver: bridge
  hack_network:
    driver: bridge

volumes:
  kasm_db_1.15.0:
  portainer_data:
  npm_data:
  npm_letsencrypt:
  evilginx2_workspace_data:
  gophish_workspace_data:
  evilginx2_data:
  gophish_data:
  axiom_data:
